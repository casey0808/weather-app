{"version":3,"sources":["keys.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","api","key","keys","base","Weather","useState","query","setQuery","weather","setWeather","className","type","placeholder","value","onChange","e","target","onKeyPress","axios","get","then","res","data","main","name","toUpperCase","sys","country","d","datetime","String","window","Date","slice","datetimeBuild","Math","round","temp","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qIAAAA,EAAOC,QAAU,CACbC,QAAS,mCACTC,SAAU,4C,iMCGRC,G,MAAM,CACVC,IAAKC,IAAKJ,QACVK,KAAMD,IAAKH,WA+DEK,MA5Df,WACE,IADiB,EAQSC,mBAAS,IARlB,mBAQVC,EARU,KAQHC,EARG,OASaF,mBAAS,IATtB,mBASVG,EATU,KASDC,EATC,KAuBjB,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,mBACA,2BACEC,KAAK,OACLC,YAAY,iBACZF,UAAU,aACVG,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOH,QACnCI,WArBS,SAACF,GACA,UAAVA,EAAEd,KACJiB,IACGC,IADH,UACUnB,EAAIG,KADd,qBAC+BG,EAD/B,kBAC8CN,EAAIC,MAC/CmB,MAAK,SAACC,GACLd,EAAS,IACTE,EAAWY,EAAIC,YAkBO,qBAAjBd,EAAQe,KACb,yBAAKb,UAAU,qBACb,uBAAGA,UAAU,QACVF,EAAQgB,KAAKC,cADhB,KACiCjB,EAAQkB,IAAIC,SAE7C,yBAAKjB,UAAU,QAvCH,SAACkB,GACrB,IAAIC,EAAWC,OAAO,IAAIC,OAAOC,MAGjC,OAFWH,EAASI,MAAM,EAAG,IAEf,KADHJ,EAASI,MAAM,GAAI,IAoCCC,CAAc,IAAIF,OACzC,wBAAItB,UAAU,QAAQyB,KAAKC,MAAM5B,EAAQe,KAAKc,KAAO,QAArD,SACA,yBAAK3B,UAAU,WAAWF,EAAQA,QAAQ,GAAGe,OAG/C,KC3CKe,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ea1f75a.chunk.js","sourcesContent":["module.exports = {\r\n    API_KEY: \"dd151012f3b050e114ad11101908eecc\",\r\n    BASE_URL: \"http://api.openweathermap.org/data/2.5/\"\r\n}","import React, { useState } from 'react';\r\nimport keys from './keys';\r\nimport axios from 'axios';\r\nimport './Weather.css';\r\n\r\nconst api = {\r\n  key: keys.API_KEY,\r\n  base: keys.BASE_URL,\r\n};\r\n\r\nfunction Weather() {\r\n  const datetimeBuild = (d) => {\r\n    let datetime = String(new window.Date());\r\n    let date = datetime.slice(3, 15);\r\n    let time = datetime.slice(16, 21);\r\n    return date + '  ' + time;\r\n  };\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = (e) => {\r\n    if (e.key === 'Enter') {\r\n      axios\r\n        .get(`${api.base}weather?q=${query}&appid=${api.key}`)\r\n        .then((res) => {\r\n          setQuery('');\r\n          setWeather(res.data);\r\n          //   console.log(res.data);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1 className='title'>Current Weather</h1>\r\n      <input\r\n        type='text'\r\n        placeholder='Search city...'\r\n        className='search-bar'\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        onKeyPress={search}\r\n      ></input>\r\n      {\r\n        typeof weather.main !== 'undefined' ? (\r\n          <div className='weather-container'>\r\n            <p className='city'>\r\n              {weather.name.toUpperCase()}, {weather.sys.country}\r\n            </p>\r\n            <div className='date'>{datetimeBuild(new Date())}</div>\r\n            <h1 className='temp'>{Math.round(weather.main.temp - 273.15)}°C</h1>\r\n            <div className='weather'>{weather.weather[0].main}</div>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )\r\n        // (\r\n        // <div>\r\n        //     <p className=\"city\">SHANGHAI, CN</p>\r\n        //     <div className=\"date\">Jun 23, 2020</div>\r\n        //     <h1 className=\"temp\">25°C</h1>\r\n        //     <div className=\"weather\">Clouds</div>\r\n        // </div>\r\n        // )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport './App.css';\nimport Weather from './Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}